<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-init-method="initialize" default-destroy-method="destroy">

	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
		p:placeholderPrefix="%{" p:placeholderSuffix="}" />

	<bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />
	<bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

	<bean id="foobar" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:test:foobar" />
	<bean id="stepup" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:test:stepup" />
	<bean id="stepup2" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:test:stepup2" />
	<bean id="stepup3" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:test:stepup3" />
	<bean id="stepup4" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:test:stepup4" />
	<bean id="password" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport" />
	<bean id="password2" parent="shibboleth.SAML2AuthnContextClassRef"
		c:classRef="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport2" />


	<bean id="FooStepUpContextes" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<ref bean="foobar" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="AllStepUpContextes" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<ref bean="stepup" />
				<ref bean="stepup2" />
				<ref bean="stepup3" />
				<ref bean="stepup4" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="InitializeStepUpChallengeContext" class="fi.csc.idp.stepup.impl.InitializeStepUpChallengeContext"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
		<property name="stepUpMethods">
			<map>
				<entry key-ref="GoogleAuthStepUpManager" value-ref="AllStepUpContextes" />
				<entry key-ref="SMSReceiverStepUpManager" value-ref="FooStepUpContextes" />
				<entry key-ref="MailStepUpManager" value-ref="FooStepUpContextes" />
			</map>
		</property>
	</bean>

	<bean id="InitializeRegistrationStepUpChallengeContext" class="fi.csc.idp.stepup.impl.InitializeStepUpChallengeContext"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
		<property name="stepUpMethods">
			<map>
				<entry key-ref="SMSStepUpManager" value-ref="AllStepUpContextes" />
			</map>
		</property>
	</bean>

	<bean id="GoogleAuthStepUpManager"
		class="fi.csc.idp.stepup.impl.AttributeKeyBasedStorageStepUpAccountManager"
		scope="prototype" p:name="TOTP" p:attributeId="INTeppn"
		p:accountLimit="1" p:autoRemove="true" p:stepUpAccountStorage-ref="GAStepUpAccountStorage"
		p:accountID="GoogleAuthenticatorStepUpAccount">
	</bean>

	<!-- Hikari as datasource example -->
	<bean id="HikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="dataSourceProperties">
			<props>
				<prop key="url">jdbc:mariadb://localhost:3306/totp</prop>
				<prop key="user">foo</prop>
				<prop key="password">bar</prop>
			</props>
		</property>
		<property name="dataSourceClassName" value="org.mariadb.jdbc.MySQLDataSource" />
	</bean>
	<bean id="GADataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="HikariConfig" />
	</bean>

	<bean id="GAStepUpAccountStorage" class="fi.csc.idp.stepup.impl.SQLStepUpAccountStorage"
		p:dataSource-ref="GADataSource" p:encryptKey="TRUE" p:encryptTarget="TRUE"
		p:encryptor-ref="GAAccountEncryptor">
		<property name="listStatement">
			<value>
          <![CDATA[
                SELECT * FROM totp.ga WHERE user=?
          ]]>
			</value>
		</property>
		<property name="addStatement">
			<value>
          <![CDATA[
                INSERT INTO totp.ga (name,enabled,editable,target,user) VALUES(?,?,?,?,?)
          ]]>
			</value>
		</property>
		<property name="updateStatement">
			<value>
          <![CDATA[
                UPDATE totp.ga SET name=?,enabled=?,editable=?,target=?,user=? WHERE id=?
          ]]>
			</value>
		</property>
	</bean>

	<bean id="GAAccountEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors"
		factory-method="queryableText">
		<constructor-arg value="foo" />
		<constructor-arg value="bar" />
	</bean>

	<bean id="LogStepUpManager" class="fi.csc.idp.stepup.impl.DefaultStepUpAccountManager"
		scope="prototype" p:name="Logfile" p:AccountID="LogStepUpAccount">
	</bean>

	<bean id="MailStepUpManager"
		class="fi.csc.idp.stepup.impl.AttributeTargetBasedStepUpAccountManager"
		scope="prototype" p:name="Email" p:AttributeId="INTmail" p:AccountID="EmailStepUpAccount">
	</bean>

	<bean id="SMSStepUpManager"
		class="fi.csc.idp.stepup.impl.AttributeTargetBasedStepUpAccountManager"
		scope="prototype" p:name="SMS Sender" p:AttributeId="INTmobile"
		p:AccountID="SMSStepUpAccount">
	</bean>

	<bean id="SMSReceiverStepUpManager"
		class="fi.csc.idp.stepup.impl.AttributeTargetBasedStepUpAccountManager"
		scope="prototype" p:name="SMS Receiver" p:AttributeId="INTmobile"
		p:AccountID="SMSReceiverStepUpAccount">
	</bean>

	<bean id="LogStepUpAccount" class="fi.csc.idp.stepup.impl.ChallengeSenderStepUpAccount"
		scope="prototype" p:ChallengeGenerator-ref="ChallengeGenerator"
		p:ChallengeVerifier-ref="EqualVerifier" p:ChallengeSender-ref="LogChallengeSender">
	</bean>

	<bean id="EmailStepUpAccount" class="fi.csc.idp.stepup.impl.ChallengeSenderStepUpAccount"
		scope="prototype" p:ChallengeGenerator-ref="ChallengeGenerator"
		p:ChallengeVerifier-ref="EqualVerifier" p:ChallengeSender-ref="MailChallengeSender">
	</bean>

	<bean id="SMSStepUpAccount" class="fi.csc.idp.stepup.impl.ChallengeSenderStepUpAccount"
		scope="prototype" p:ChallengeGenerator-ref="ChallengeGenerator"
		p:ChallengeVerifier-ref="EqualVerifier" p:ChallengeSender-ref="SMSChallengeSender"
		p:retryLimit="2">
	</bean>

	<bean id="SMSReceiverStepUpAccount" class="fi.csc.idp.stepup.impl.TvilioSMSReceiverStepUpAccount"
		scope="prototype" p:ChallengeGenerator-ref="EmptyChallengeGenerator"
		p:ChallengeVerifier-ref="EqualVerifier" p:accountSid="foo"
		p:authToken="bar" p:numberOfChecks="1" p:eventWindow="3600000"
		p:ChallengeSender-ref="SMSEmptyChallengeSender">
	</bean>

	<bean id="GoogleAuthenticatorStepUpAccount" class="fi.csc.idp.stepup.impl.GoogleAuthenticatorStepUpAccount"
		scope="prototype">
	</bean>


	<bean id="AddAccount" class="fi.csc.idp.stepup.impl.AddAccount"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
	</bean>

	<bean id="UpdateAccount" class="fi.csc.idp.stepup.impl.UpdateAccount"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
	</bean>

	<bean id="GenerateStepUpChallenge" class="fi.csc.idp.stepup.impl.GenerateStepUpChallenge"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
	</bean>

	<bean id="VerifyPasswordFromFormRequest" class="fi.csc.idp.stepup.impl.VerifyPasswordFromFormRequest"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
	</bean>

	<bean id="VerifyResponse" class="fi.csc.idp.stepup.impl.VerifyResponse"
		scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest">
	</bean>

	<bean id="LogChallengeSender" class="fi.csc.idp.stepup.impl.LogChallengeSender">
	</bean>

	<bean id="MailChallengeSender" class="fi.csc.idp.stepup.impl.MailChallengeSender"
		p:subjectField="mailsubject" p:fromField="foo" p:host="bar" p:port="25"
		p:templatePath="/mails" p:templateFile="foobar.vm" p:sMTPAuth="false"
		p:sMTPTtls="true">
	</bean>

	<bean id="SMSChallengeSender" class="fi.csc.idp.stepup.impl.TvilioSMSChallengeSender"
		p:senderNumber="foobar" p:accountSid="foo" p:authToken="bar"
		p:message="The code to access the service is %s, reply with the code">
	</bean>

	<bean id="SMSEmptyChallengeSender" class="fi.csc.idp.stepup.impl.TvilioSMSChallengeSender"
		p:senderNumber="foobar" p:accountSid="foo" p:authToken="bar"
		p:message="Please reply to this message to gain access to service.">
	</bean>


	<bean id="ChallengeGenerator" class="fi.csc.idp.stepup.impl.DigestChallengeGenerator"
		p:decimal="true">
	</bean>

	<bean id="EmptyChallengeGenerator" class="fi.csc.idp.stepup.impl.DigestChallengeGenerator"
		p:maxLength="0">
	</bean>

	<bean id="OneCharChallengeGenerator" class="fi.csc.idp.stepup.impl.DigestChallengeGenerator"
		p:maxLength="1">
	</bean>


	<bean id="EqualVerifier" class="fi.csc.idp.stepup.impl.EqualChallengeResponseVerifier">
	</bean>

</beans>
