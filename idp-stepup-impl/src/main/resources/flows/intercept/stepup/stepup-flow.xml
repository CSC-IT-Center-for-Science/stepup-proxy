
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
	parent="intercept.abstract">

	<!-- Rudimentary impediment to direct execution of subflow. -->
	<input name="calledAsSubflow" type="boolean" required="true" />

	<action-state id="CheckNeed">
		<evaluate expression="CheckRequestedAuthenticationContext" />
		<!-- As stepup is not requested we move to setting the method -->
		<evaluate expression="'proceed'" />
		<transition on="AuthnContextNotStepUp" to="SetMethod" />
		<transition on="proceed" to="CheckProvidedAuthenticationContext" />
	</action-state>

	<action-state id="SetMethod">
		<!-- We set the authentication metohd to mapped value if it exists -->
		<evaluate expression="SetRequestedAuthenticationContext" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="proceed" />
	</action-state>

	<action-state id="CheckProvidedAuthenticationContext">
		<evaluate expression="CheckProvidedAuthenticationContext" />
		<evaluate expression="'proceed'" />
		<!-- actions states that provided authentication method value can be regarded 
			as step up -->
		<transition on="AuthnContextStepUp" to="proceed" />
		<transition on="proceed" to="PerformStepUp" />
	</action-state>

	<subflow-state id="PerformStepUp" subflow="authn/mfa">
		<input name="calledAsSubflow" value="true" />
		<transition to="proceed" />
	</subflow-state>

	<!-- Error and end handling starts -->

	<!-- Error view -->
	<view-state id="DisplayError" view="#{flowRequestContext.activeFlow.id}-error">
		<on-render>
			<evaluate expression="environment" result="viewScope.environment" />
			<evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
			<evaluate
				expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
				result="viewScope.encoder" />
			<evaluate
				expression="flowRequestContext.getExternalContext().getNativeRequest()"
				result="viewScope.request" />
			<evaluate
				expression="flowRequestContext.getExternalContext().getNativeResponse()"
				result="viewScope.response" />
		</on-render>
	</view-state>

	<!-- Passthrough state if an exception is thrown. -->
	<action-state id="LogRuntimeException">
		<on-entry>
			<evaluate
				expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.saml.profile').error('Uncaught runtime exception', flowExecutionException.getCause())" />
		</on-entry>
		<evaluate expression="'RuntimeException'" />
		<transition to="DisplayError" />
	</action-state>

	<!-- Successful end state -->
	<end-state id="proceed" />

	<!-- all unhandled non proceed results are turned into errors -->
	<global-transitions>
		<transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
		<transition on="#{!'proceed'.equals(currentEvent.id)}" to="DisplayError" />
	</global-transitions>

	<bean-import resource="stepup-beans.xml" />

</flow>
