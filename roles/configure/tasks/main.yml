---
- name: Disable SELinux
  selinux:
    state: disabled

- name: Copying SP metadata
  template: src={{ playbook_dir }}/roles/configure/templates/{{item}} dest=/opt/shibboleth-idp/metadata/{{item}}
  with_items:
    - "sp-metadata.xml"

- name: Copying IdP metadata
  template: src={{ playbook_dir }}/roles/configure/templates/{{item}} dest=/etc/shibboleth/metadata/{{item}}
  with_items:
    - "idp-metadata.xml"

- name: Copying proxy.conf
  template: src={{ playbook_dir }}/roles/configure/templates/{{item}} dest=/etc/httpd/conf.d/{{item}}
  with_items:
    - "proxy.conf"

- name: Shibboleth SP, set SSO
  xml:
    xpath: "{{ item.xpath }}"
    attribute: "{{ item.attribute }}"
    value: "{{ item.value }}"
    ensure: "{{ item.ensure }}"
    file: /etc/shibboleth/shibboleth2.xml
    namespaces:
      x: urn:mace:shibboleth:3.0:native:sp:config
  with_items:
    - { xpath: "//x:SPConfig/x:ApplicationDefaults/x:Sessions/x:SSO", attribute: "entityID", value: "https://stepup-devel.local/idp/shibboleth", ensure: present }
    - { xpath: "//x:SPConfig/x:ApplicationDefaults/x:Sessions/x:SSO/@discoveryURL", attribute: "discoveryURL", value: NULL, ensure: absent }
    - { xpath: "//x:SPConfig/x:ApplicationDefaults/x:Sessions/x:SSO", attribute: NULL, value: SAML2, ensure: present }
    - { xpath: "//x:SPConfig/x:ApplicationDefaults/x:Sessions/x:SSO", attribute: NULL, value: SAML1, ensure: absent }

- name: Shibboleth SP, set metadata provider for IdP metadata
  blockinfile:
    dest: "/etc/shibboleth/shibboleth2.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED IdP metadata -->"
    insertafter: "Example of locally maintained metadata"
    content: |
          <MetadataProvider type="XML" validate="true" path="metadata/idp-metadata.xml"/>
 
- name: Shibboleth IdP, set metadata provider for SP metadata
  blockinfile:
    dest: "/opt/shibboleth-idp/conf/metadata-providers.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "</MetadataProvider>"
    content: |
          <MetadataProvider id="LocalMetadata"  xsi:type="FilesystemMetadataProvider" metadataFile="/opt/shibboleth-idp/metadata/sp-metadata.xml"/>

- name: Shibboleth IdP, set override for rp
  blockinfile:
    dest: "/opt/shibboleth-idp/conf/relying-party.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK, override -->"
    insertafter: "shibboleth.RelyingPartyOverrides"
    content: |
          <bean parent="RelyingPartyByName" c:relyingPartyIds="https://stepup-devel.local/shibboleth">
            <property name="profileConfigurations">
                <list>
                    <bean parent="SAML2.SSO" p:encryptAssertions="false" />
                </list>
            </property>
          </bean>

- name: Jetty
  blockinfile:
    dest: "/opt/jetty/etc/jetty.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK, override -->"
    insertafter: "org.eclipse.jetty.server.HttpConfiguration"
    content: |
          <Call name="addCustomizer">
            <Arg><New class="org.eclipse.jetty.server.ForwardedRequestCustomizer"/></Arg>
          </Call>

- name: Shibboleth IdP, configure ldap.properties
  lineinfile: dest=/opt/shibboleth-idp/conf/ldap.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.authn.LDAP.authenticator', value: 'bindSearchAuthenticator'}
    - { option: 'idp.authn.LDAP.ldapURL', value: 'ldap://localhost:389' }
    - { option: 'idp.authn.LDAP.useStartTLS', value: 'false' }
    - { option: 'idp.authn.LDAP.useSSL', value: 'false' }
    - { option: 'idp.authn.LDAP.baseDN', value: 'ou=People,{{ dirsrv_suffix }}' }
    - { option: 'idp.authn.LDAP.bindDN', value: 'cn=Directory Manager' }
    - { option: 'idp.authn.LDAP.bindDNCredential', value: '{{ dirsrv_password }}' }

- template: src={{ playbook_dir }}/roles/configure/ldif/{{item}} dest=/tmp/{{item}}
  with_items:
    - "aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"

- set_fact:
    acifile: "/tmp/aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"
  when: aci is defined

- name: ACI | Add
  shell: ldapmodify -x -D "{{ dirsrv_rootdn }}" -H ldap://localhost:389 -w {{ dirsrv_password }} -f {{ acifile }}
  ignore_errors: yes
  when: aci is defined

